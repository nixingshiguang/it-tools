{
  "version": 3,
  "sources": ["../../.pnpm/cron-validator@1.3.1/node_modules/cron-validator/src/index.ts"],
  "sourcesContent": ["// This comes from the fact that parseInt trims characters coming\n// after digits and consider it a valid int, so `1*` becomes `1`.\nconst safeParseInt = (value: string): number => {\n  if (/^\\d+$/.test(value)) {\n    return Number(value)\n  } else {\n    return NaN\n  }\n}\n\nconst isWildcard = (value: string): boolean => {\n  return value === '*'\n}\n\nconst isQuestionMark = (value: string): boolean => {\n  return value === '?'\n}\n\nconst isInRange = (value: number, start: number, stop: number): boolean => {\n  return value >= start && value <= stop\n}\n\nconst isValidRange = (value: string, start: number, stop: number): boolean => {\n  const sides = value.split('-')\n  switch (sides.length) {\n    case 1:\n      return isWildcard(value) || isInRange(safeParseInt(value), start, stop)\n    case 2:\n      const [small, big] = sides.map((side: string): number => safeParseInt(side))\n      return small <= big && isInRange(small, start, stop) && isInRange(big, start, stop)\n    default:\n      return false\n  }\n}\n\nconst isValidStep = (value: string | undefined): boolean => {\n  return value === undefined || (value.search(/[^\\d]/) === -1 && safeParseInt(value) > 0)\n}\n\nconst validateForRange = (value: string, start: number, stop: number): boolean => {\n  if (value.search(/[^\\d-,\\/*]/) !== -1) {\n    return false\n  }\n\n  const list = value.split(',')\n  return list.every((condition: string): boolean => {\n    const splits = condition.split('/')\n    // Prevents `*/ * * * *` from being accepted.\n    if (condition.trim().endsWith('/')) {\n      return false\n    }\n\n    // Prevents `*/*/* * * * *` from being accepted\n    if (splits.length > 2) {\n      return false\n    }\n\n    // If we don't have a `/`, right will be undefined which is considered a valid step if we don't a `/`.\n    const [left, right] = splits\n    return isValidRange(left, start, stop) && isValidStep(right)\n  })\n}\n\nconst hasValidSeconds = (seconds: string): boolean => {\n  return validateForRange(seconds, 0, 59)\n}\n\nconst hasValidMinutes = (minutes: string): boolean => {\n  return validateForRange(minutes, 0, 59)\n}\n\nconst hasValidHours = (hours: string): boolean => {\n  return validateForRange(hours, 0, 23)\n}\n\nconst hasValidDays = (days: string, allowBlankDay?: boolean): boolean => {\n  return (allowBlankDay && isQuestionMark(days)) || validateForRange(days, 1, 31)\n}\n\nconst monthAlias: { [key: string]: string } = {\n  jan: '1',\n  feb: '2',\n  mar: '3',\n  apr: '4',\n  may: '5',\n  jun: '6',\n  jul: '7',\n  aug: '8',\n  sep: '9',\n  oct: '10',\n  nov: '11',\n  dec: '12'\n}\n\nconst hasValidMonths = (months: string, alias?: boolean): boolean => {\n  // Prevents alias to be used as steps\n  if (months.search(/\\/[a-zA-Z]/) !== -1) {\n    return false\n  }\n\n  if (alias) {\n    const remappedMonths = months.toLowerCase().replace(/[a-z]{3}/g, (match: string): string => {\n      return monthAlias[match] === undefined ? match : monthAlias[match]\n    })\n    // If any invalid alias was used, it won't pass the other checks as there will be non-numeric values in the months\n    return validateForRange(remappedMonths, 1, 12)\n  }\n\n  return validateForRange(months, 1, 12)\n}\n\nconst weekdaysAlias: { [key: string]: string } = {\n  sun: '0',\n  mon: '1',\n  tue: '2',\n  wed: '3',\n  thu: '4',\n  fri: '5',\n  sat: '6'\n}\n\nconst hasValidWeekdays = (weekdays: string, alias?: boolean, allowBlankDay?: boolean, allowSevenAsSunday?: boolean): boolean => {\n\n  // If there is a question mark, checks if the allowBlankDay flag is set\n  if (allowBlankDay && isQuestionMark(weekdays)) {\n    return true\n  } else if (!allowBlankDay && isQuestionMark(weekdays)) {\n    return false\n  }\n\n  // Prevents alias to be used as steps\n  if (weekdays.search(/\\/[a-zA-Z]/) !== -1) {\n    return false\n  }\n\n  if (alias) {\n    const remappedWeekdays = weekdays.toLowerCase().replace(/[a-z]{3}/g, (match: string): string => {\n      return weekdaysAlias[match] === undefined ? match : weekdaysAlias[match]\n    })\n    // If any invalid alias was used, it won't pass the other checks as there will be non-numeric values in the weekdays\n    return validateForRange(remappedWeekdays, 0, allowSevenAsSunday ? 7 : 6)\n  }\n\n  return validateForRange(weekdays, 0, allowSevenAsSunday ? 7 : 6)\n}\n\nconst hasCompatibleDayFormat = (days: string, weekdays: string, allowBlankDay?: boolean) => {\n  return !(allowBlankDay && isQuestionMark(days) && isQuestionMark(weekdays))\n}\n\nconst split = (cron: string): string[] => {\n  return cron.trim().split(/\\s+/)\n}\n\ntype Options = {\n  alias: boolean\n  seconds: boolean\n  allowBlankDay: boolean\n  allowSevenAsSunday: boolean\n}\n\nconst defaultOptions: Options = {\n  alias: false,\n  seconds: false,\n  allowBlankDay: false,\n  allowSevenAsSunday: false\n}\n\nexport const isValidCron = (cron: string, options?: Partial<Options>): boolean => {\n  options = { ...defaultOptions, ...options }\n\n  const splits = split(cron)\n\n  if (splits.length > (options.seconds ? 6 : 5) || splits.length < 5) {\n    return false\n  }\n\n  const checks: boolean[] = []\n  if (splits.length === 6) {\n    const seconds = splits.shift()\n    if (seconds) {\n      checks.push(hasValidSeconds(seconds))\n    }\n  }\n\n  // We could only check the steps gradually and return false on the first invalid block,\n  // However, this won't have any performance impact so why bother for now.\n  const [minutes, hours, days, months, weekdays] = splits\n  checks.push(hasValidMinutes(minutes))\n  checks.push(hasValidHours(hours))\n  checks.push(hasValidDays(days, options.allowBlankDay))\n  checks.push(hasValidMonths(months, options.alias))\n  checks.push(hasValidWeekdays(weekdays, options.alias, options.allowBlankDay, options.allowSevenAsSunday))\n  checks.push(hasCompatibleDayFormat(days, weekdays, options.allowBlankDay))\n\n  return checks.every(Boolean)\n}\n"],
  "mappings": "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",
  "names": []
}
