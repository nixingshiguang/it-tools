import "./chunk-2LSFTFF7.js";

// node_modules/.pnpm/ibantools@4.3.3/node_modules/ibantools/jsnext/ibantools.js
function isValidIBAN(iban, validationOptions) {
  if (validationOptions === void 0) {
    validationOptions = { allowQRIBAN: true };
  }
  if (iban === void 0 || iban === null)
    return false;
  var reg = new RegExp("^[0-9]{2}$", "");
  var countryCode = iban.slice(0, 2);
  var spec = countrySpecs[countryCode];
  if (spec === void 0 || spec.bban_regexp === void 0 || spec.bban_regexp === null || spec.chars === void 0)
    return false;
  return spec.chars === iban.length && reg.test(iban.slice(2, 4)) && isValidBBAN(iban.slice(4), countryCode) && isValidIBANChecksum(iban) && (validationOptions.allowQRIBAN || !isQRIBAN(iban));
}
var ValidationErrorsIBAN;
(function(ValidationErrorsIBAN2) {
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["NoIBANProvided"] = 0] = "NoIBANProvided";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["NoIBANCountry"] = 1] = "NoIBANCountry";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["WrongBBANLength"] = 2] = "WrongBBANLength";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["WrongBBANFormat"] = 3] = "WrongBBANFormat";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["ChecksumNotNumber"] = 4] = "ChecksumNotNumber";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["WrongIBANChecksum"] = 5] = "WrongIBANChecksum";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["WrongAccountBankBranchChecksum"] = 6] = "WrongAccountBankBranchChecksum";
  ValidationErrorsIBAN2[ValidationErrorsIBAN2["QRIBANNotAllowed"] = 7] = "QRIBANNotAllowed";
})(ValidationErrorsIBAN || (ValidationErrorsIBAN = {}));
function validateIBAN(iban, validationOptions) {
  if (validationOptions === void 0) {
    validationOptions = { allowQRIBAN: true };
  }
  var result = { errorCodes: [], valid: true };
  if (iban !== void 0 && iban !== null && iban !== "") {
    var spec = countrySpecs[iban.slice(0, 2)];
    if (!spec || !(spec.bban_regexp || spec.chars)) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.NoIBANCountry);
      return result;
    }
    if (spec && spec.chars && spec.chars !== iban.length) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.WrongBBANLength);
    }
    if (spec && spec.bban_regexp && !checkFormatBBAN(iban.slice(4), spec.bban_regexp)) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.WrongBBANFormat);
    }
    if (spec && spec.bban_validation_func && !spec.bban_validation_func(iban.slice(4))) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.WrongAccountBankBranchChecksum);
    }
    var reg = new RegExp("^[0-9]{2}$", "");
    if (!reg.test(iban.slice(2, 4))) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.ChecksumNotNumber);
    }
    if (result.errorCodes.indexOf(ValidationErrorsIBAN.WrongBBANFormat) !== -1 || !isValidIBANChecksum(iban)) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.WrongIBANChecksum);
    }
    if (!validationOptions.allowQRIBAN && isQRIBAN(iban)) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsIBAN.QRIBANNotAllowed);
    }
  } else {
    result.valid = false;
    result.errorCodes.push(ValidationErrorsIBAN.NoIBANProvided);
  }
  return result;
}
function isValidBBAN(bban, countryCode) {
  if (bban === void 0 || bban === null || countryCode === void 0 || countryCode === null)
    return false;
  var spec = countrySpecs[countryCode];
  if (spec === void 0 || spec === null || spec.bban_regexp === void 0 || spec.bban_regexp === null || spec.chars === void 0 || spec.chars === null)
    return false;
  if (spec.chars - 4 === bban.length && checkFormatBBAN(bban, spec.bban_regexp)) {
    if (spec.bban_validation_func) {
      return spec.bban_validation_func(bban.replace(/[\s.]+/g, ""));
    }
    return true;
  }
  return false;
}
function isSEPACountry(countryCode) {
  if (countryCode !== void 0 && countryCode !== null) {
    var spec = countrySpecs[countryCode];
    if (spec !== void 0) {
      return spec.SEPA ? spec.SEPA : false;
    }
  }
  return false;
}
function isQRIBAN(iban) {
  if (iban === void 0 || iban === null)
    return false;
  var countryCode = iban.slice(0, 2);
  var QRIBANCountries = ["LI", "CH"];
  if (!QRIBANCountries.includes(countryCode))
    return false;
  var reg = new RegExp("^3[0-1]{1}[0-9]{3}$", "");
  return reg.test(iban.slice(4, 9));
}
function composeIBAN(params) {
  var formated_bban = electronicFormatIBAN(params.bban) || "";
  if (params.countryCode === null || params.countryCode === void 0) {
    return null;
  }
  var spec = countrySpecs[params.countryCode];
  if (formated_bban !== "" && spec !== void 0 && spec.chars && spec.chars !== null && spec.chars === formated_bban.length + 4 && spec.bban_regexp && spec.bban_regexp !== null && checkFormatBBAN(formated_bban, spec.bban_regexp)) {
    var checksom = mod9710Iban(params.countryCode + "00" + formated_bban);
    return params.countryCode + ("0" + (98 - checksom)).slice(-2) + formated_bban;
  }
  return null;
}
function extractIBAN(iban) {
  var result = {};
  var eFormatIBAN = electronicFormatIBAN(iban);
  result.iban = eFormatIBAN || iban;
  if (!!eFormatIBAN && isValidIBAN(eFormatIBAN)) {
    result.bban = eFormatIBAN.slice(4);
    result.countryCode = eFormatIBAN.slice(0, 2);
    result.valid = true;
  } else {
    result.valid = false;
  }
  return result;
}
function checkFormatBBAN(bban, bformat) {
  var reg = new RegExp(bformat, "");
  return reg.test(bban);
}
function electronicFormatIBAN(iban) {
  if (typeof iban !== "string") {
    return null;
  }
  return iban.replace(/[-\ ]/g, "").toUpperCase();
}
function friendlyFormatIBAN(iban, separator) {
  if (typeof iban !== "string") {
    return null;
  }
  if (separator === void 0 || separator === null) {
    separator = " ";
  }
  var electronic_iban = electronicFormatIBAN(iban);
  if (electronic_iban === null) {
    return null;
  }
  return electronic_iban.replace(/(.{4})(?!$)/g, "$1" + separator);
}
function isValidIBANChecksum(iban) {
  var countryCode = iban.slice(0, 2);
  var providedChecksum = parseInt(iban.slice(2, 4), 10);
  var bban = iban.slice(4);
  var validationString = replaceCharaterWithCode("".concat(bban).concat(countryCode, "00"));
  var rest = mod9710(validationString);
  return 98 - rest === providedChecksum;
}
function replaceCharaterWithCode(str) {
  return str.split("").map(function(c) {
    var code = c.charCodeAt(0);
    return code >= 65 ? (code - 55).toString() : c;
  }).join("");
}
function mod9710Iban(iban) {
  return mod9710(replaceCharaterWithCode(iban.slice(3) + iban.slice(0, 4)));
}
function getCountrySpecifications() {
  var countyMap = {};
  for (var countyCode in countrySpecs) {
    var county = countrySpecs[countyCode];
    countyMap[countyCode] = {
      chars: county.chars || null,
      bban_regexp: county.bban_regexp || null,
      IBANRegistry: county.IBANRegistry || false,
      SEPA: county.SEPA || false
    };
  }
  return countyMap;
}
function isValidBIC(bic) {
  if (!bic) {
    return false;
  }
  var reg = new RegExp("^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$", "");
  var spec = countrySpecs[bic.toUpperCase().slice(4, 6)];
  return reg.test(bic) && spec !== void 0;
}
var ValidationErrorsBIC;
(function(ValidationErrorsBIC2) {
  ValidationErrorsBIC2[ValidationErrorsBIC2["NoBICProvided"] = 0] = "NoBICProvided";
  ValidationErrorsBIC2[ValidationErrorsBIC2["NoBICCountry"] = 1] = "NoBICCountry";
  ValidationErrorsBIC2[ValidationErrorsBIC2["WrongBICFormat"] = 2] = "WrongBICFormat";
})(ValidationErrorsBIC || (ValidationErrorsBIC = {}));
function validateBIC(bic) {
  var result = { errorCodes: [], valid: true };
  if (bic !== void 0 && bic !== null && bic !== "") {
    var spec = countrySpecs[bic.toUpperCase().slice(4, 6)];
    if (spec === void 0) {
      result.valid = false;
      result.errorCodes.push(ValidationErrorsBIC.NoBICCountry);
    } else {
      var reg = new RegExp("^[a-zA-Z]{6}[a-zA-Z0-9]{2}([a-zA-Z0-9]{3})?$", "");
      if (!reg.test(bic)) {
        result.valid = false;
        result.errorCodes.push(ValidationErrorsBIC.WrongBICFormat);
      }
    }
  } else {
    result.valid = false;
    result.errorCodes.push(ValidationErrorsBIC.NoBICProvided);
  }
  return result;
}
function extractBIC(inputBic) {
  var result = {};
  var bic = inputBic.toUpperCase();
  if (isValidBIC(bic)) {
    result.bankCode = bic.slice(0, 4);
    result.countryCode = bic.slice(4, 6);
    result.locationCode = bic.slice(6, 8);
    result.testBIC = result.locationCode[1] === "0" ? true : false;
    result.branchCode = bic.length > 8 ? bic.slice(8) : null;
    result.valid = true;
  } else {
    result.valid = false;
  }
  return result;
}
var checkNorwayBBAN = function(bban) {
  var weights = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2];
  var bbanWithoutSpacesAndPeriods = bban.replace(/[\s.]+/g, "");
  var controlDigit = parseInt(bbanWithoutSpacesAndPeriods.charAt(10), 10);
  var bbanWithoutControlDigit = bbanWithoutSpacesAndPeriods.substring(0, 10);
  var sum = 0;
  for (var index = 0; index < 10; index++) {
    sum += parseInt(bbanWithoutControlDigit.charAt(index), 10) * weights[index];
  }
  var remainder = sum % 11;
  return controlDigit === (remainder === 0 ? 0 : 11 - remainder);
};
var checkBelgianBBAN = function(bban) {
  var stripped = bban.replace(/[\s.]+/g, "");
  var checkingPart = parseInt(stripped.substring(0, stripped.length - 2), 10);
  var checksum = parseInt(stripped.substring(stripped.length - 2, stripped.length), 10);
  var remainder = checkingPart % 97 === 0 ? 97 : checkingPart % 97;
  return remainder === checksum;
};
var mod9710 = function(validationString) {
  while (validationString.length > 2) {
    var part = validationString.slice(0, 6);
    var partInt = parseInt(part, 10);
    if (isNaN(partInt)) {
      return NaN;
    }
    validationString = partInt % 97 + validationString.slice(part.length);
  }
  return parseInt(validationString, 10) % 97;
};
var checkMod9710BBAN = function(bban) {
  var stripped = bban.replace(/[\s.]+/g, "");
  var reminder = mod9710(stripped);
  return reminder === 1;
};
var checkPolandBBAN = function(bban) {
  var weights = [3, 9, 7, 1, 3, 9, 7];
  var controlDigit = parseInt(bban.charAt(7), 10);
  var toCheck = bban.substring(0, 7);
  var sum = 0;
  for (var index = 0; index < 7; index++) {
    sum += parseInt(toCheck.charAt(index), 10) * weights[index];
  }
  var remainder = sum % 10;
  return controlDigit === (remainder === 0 ? 0 : 10 - remainder);
};
var checkSpainBBAN = function(bban) {
  var weightsBankBranch = [4, 8, 5, 10, 9, 7, 3, 6];
  var weightsAccount = [1, 2, 4, 8, 5, 10, 9, 7, 3, 6];
  var controlBankBranch = parseInt(bban.charAt(8), 10);
  var controlAccount = parseInt(bban.charAt(9), 10);
  var bankBranch = bban.substring(0, 8);
  var account = bban.substring(10, 20);
  var sum = 0;
  for (var index = 0; index < 8; index++) {
    sum += parseInt(bankBranch.charAt(index), 10) * weightsBankBranch[index];
  }
  var remainder = sum % 11;
  if (controlBankBranch !== (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder)) {
    return false;
  }
  sum = 0;
  for (var index = 0; index < 10; index++) {
    sum += parseInt(account.charAt(index), 10) * weightsAccount[index];
  }
  remainder = sum % 11;
  return controlAccount === (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder);
};
var checkMod1110 = function(toCheck, control) {
  var nr = 10;
  for (var index = 0; index < toCheck.length; index++) {
    nr += parseInt(toCheck.charAt(index), 10);
    if (nr % 10 !== 0) {
      nr = nr % 10;
    }
    nr = nr * 2;
    nr = nr % 11;
  }
  return control === (11 - nr === 10 ? 0 : 11 - nr);
};
var checkCroatianBBAN = function(bban) {
  var controlBankBranch = parseInt(bban.charAt(6), 10);
  var controlAccount = parseInt(bban.charAt(16), 10);
  var bankBranch = bban.substring(0, 6);
  var account = bban.substring(7, 16);
  return checkMod1110(bankBranch, controlBankBranch) && checkMod1110(account, controlAccount);
};
var checkCzechAndSlovakBBAN = function(bban) {
  var weightsPrefix = [10, 5, 8, 4, 2, 1];
  var weightsSuffix = [6, 3, 7, 9, 10, 5, 8, 4, 2, 1];
  var controlPrefix = parseInt(bban.charAt(9), 10);
  var controlSuffix = parseInt(bban.charAt(19), 10);
  var prefix = bban.substring(4, 9);
  var suffix = bban.substring(10, 19);
  var sum = 0;
  for (var index = 0; index < prefix.length; index++) {
    sum += parseInt(prefix.charAt(index), 10) * weightsPrefix[index];
  }
  var remainder = sum % 11;
  if (controlPrefix !== (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder)) {
    return false;
  }
  sum = 0;
  for (var index = 0; index < suffix.length; index++) {
    sum += parseInt(suffix.charAt(index), 10) * weightsSuffix[index];
  }
  remainder = sum % 11;
  return controlSuffix === (remainder === 0 ? 0 : remainder === 1 ? 1 : 11 - remainder);
};
var checkEstonianBBAN = function(bban) {
  var weights = [7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7];
  var controlDigit = parseInt(bban.charAt(15), 10);
  var toCheck = bban.substring(2, 15);
  var sum = 0;
  for (var index = 0; index < toCheck.length; index++) {
    sum += parseInt(toCheck.charAt(index), 10) * weights[index];
  }
  var remainder = sum % 10;
  return controlDigit === (remainder === 0 ? 0 : 10 - remainder);
};
var checkFrenchBBAN = function(bban) {
  var stripped = bban.replace(/[\s.]+/g, "");
  var normalized = Array.from(stripped);
  for (var index = 0; index < stripped.length; index++) {
    var c = normalized[index].charCodeAt(0);
    if (c >= 65) {
      switch (c) {
        case 65:
        case 74:
          normalized[index] = "1";
          break;
        case 66:
        case 75:
        case 83:
          normalized[index] = "2";
          break;
        case 67:
        case 76:
        case 84:
          normalized[index] = "3";
          break;
        case 68:
        case 77:
        case 85:
          normalized[index] = "4";
          break;
        case 69:
        case 78:
        case 86:
          normalized[index] = "5";
          break;
        case 70:
        case 79:
        case 87:
          normalized[index] = "6";
          break;
        case 71:
        case 80:
        case 88:
          normalized[index] = "7";
          break;
        case 72:
        case 81:
        case 89:
          normalized[index] = "8";
          break;
        case 73:
        case 82:
        case 90:
          normalized[index] = "9";
          break;
      }
    }
  }
  var remainder = mod9710(normalized.join(""));
  return remainder === 0;
};
var checkHungarianBBAN = function(bban) {
  var weights = [9, 7, 3, 1, 9, 7, 3, 1, 9, 7, 3, 1, 9, 7, 3];
  var controlDigitBankBranch = parseInt(bban.charAt(7), 10);
  var toCheckBankBranch = bban.substring(0, 7);
  var sum = 0;
  for (var index = 0; index < toCheckBankBranch.length; index++) {
    sum += parseInt(toCheckBankBranch.charAt(index), 10) * weights[index];
  }
  var remainder = sum % 10;
  if (controlDigitBankBranch !== (remainder === 0 ? 0 : 10 - remainder)) {
    return false;
  }
  sum = 0;
  if (bban.endsWith("00000000")) {
    var toCheckAccount = bban.substring(8, 15);
    var controlDigitAccount = parseInt(bban.charAt(15), 10);
    for (var index = 0; index < toCheckAccount.length; index++) {
      sum += parseInt(toCheckAccount.charAt(index), 10) * weights[index];
    }
    var remainder_1 = sum % 10;
    return controlDigitAccount === (remainder_1 === 0 ? 0 : 10 - remainder_1);
  } else {
    var toCheckAccount = bban.substring(8, 23);
    var controlDigitAccount = parseInt(bban.charAt(23), 10);
    for (var index = 0; index < toCheckAccount.length; index++) {
      sum += parseInt(toCheckAccount.charAt(index), 10) * weights[index];
    }
    var remainder_2 = sum % 10;
    return controlDigitAccount === (remainder_2 === 0 ? 0 : 10 - remainder_2);
  }
};
var setCountryBBANValidation = function(country, func) {
  if (typeof countrySpecs[country] === "undefined") {
    return false;
  }
  countrySpecs[country].bban_validation_func = func;
  return true;
};
var countrySpecs = {
  AD: {
    chars: 24,
    bban_regexp: "^[0-9]{8}[A-Z0-9]{12}$",
    IBANRegistry: true,
    SEPA: true
  },
  AE: {
    chars: 23,
    bban_regexp: "^[0-9]{3}[0-9]{16}$",
    IBANRegistry: true
  },
  AF: {},
  AG: {},
  AI: {},
  AL: {
    chars: 28,
    bban_regexp: "^[0-9]{8}[A-Z0-9]{16}$",
    IBANRegistry: true
  },
  AM: {},
  AO: {
    chars: 25,
    bban_regexp: "^[0-9]{21}$"
  },
  AQ: {},
  AR: {},
  AS: {},
  AT: { chars: 20, bban_regexp: "^[0-9]{16}$", IBANRegistry: true, SEPA: true },
  AU: {},
  AW: {},
  AX: {
    chars: 18,
    bban_regexp: "^[0-9]{14}$",
    IBANRegistry: true
  },
  AZ: {
    chars: 28,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{20}$",
    IBANRegistry: true
  },
  BA: {
    chars: 20,
    bban_regexp: "^[0-9]{16}$",
    bban_validation_func: checkMod9710BBAN,
    IBANRegistry: true
  },
  BB: {},
  BD: {},
  BE: { chars: 16, bban_regexp: "^[0-9]{12}$", bban_validation_func: checkBelgianBBAN, IBANRegistry: true, SEPA: true },
  BF: {
    chars: 28,
    bban_regexp: "^[A-Z0-9]{2}[0-9]{22}$"
  },
  BG: {
    chars: 22,
    bban_regexp: "^[A-Z]{4}[0-9]{6}[A-Z0-9]{8}$",
    IBANRegistry: true,
    SEPA: true
  },
  BH: {
    chars: 22,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{14}$",
    IBANRegistry: true
  },
  BI: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  BJ: {
    chars: 28,
    bban_regexp: "^[A-Z0-9]{2}[0-9]{22}$"
  },
  BL: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  BM: {},
  BN: {},
  BO: {},
  BQ: {},
  BR: {
    chars: 29,
    bban_regexp: "^[0-9]{23}[A-Z]{1}[A-Z0-9]{1}$",
    IBANRegistry: true
  },
  BS: {},
  BT: {},
  BV: {},
  BW: {},
  BY: {
    chars: 28,
    bban_regexp: "^[A-Z]{4}[0-9]{4}[A-Z0-9]{16}$",
    IBANRegistry: true
  },
  BZ: {},
  CA: {},
  CC: {},
  CD: {},
  CF: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  CG: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  CH: {
    chars: 21,
    bban_regexp: "^[0-9]{5}[A-Z0-9]{12}$",
    IBANRegistry: true,
    SEPA: true
  },
  CI: {
    chars: 28,
    bban_regexp: "^[A-Z]{1}[0-9]{23}$"
  },
  CK: {},
  CL: {},
  CM: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  CN: {},
  CO: {},
  CR: {
    chars: 22,
    bban_regexp: "^[0-9]{18}$",
    IBANRegistry: true
  },
  CU: {},
  CV: { chars: 25, bban_regexp: "^[0-9]{21}$" },
  CW: {},
  CX: {},
  CY: {
    chars: 28,
    bban_regexp: "^[0-9]{8}[A-Z0-9]{16}$",
    IBANRegistry: true,
    SEPA: true
  },
  CZ: {
    chars: 24,
    bban_regexp: "^[0-9]{20}$",
    bban_validation_func: checkCzechAndSlovakBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  DE: { chars: 22, bban_regexp: "^[0-9]{18}$", IBANRegistry: true, SEPA: true },
  DJ: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  DK: { chars: 18, bban_regexp: "^[0-9]{14}$", IBANRegistry: true, SEPA: true },
  DM: {},
  DO: {
    chars: 28,
    bban_regexp: "^[A-Z]{4}[0-9]{20}$",
    IBANRegistry: true
  },
  DZ: {
    chars: 26,
    bban_regexp: "^[0-9]{22}$"
  },
  EC: {},
  EE: {
    chars: 20,
    bban_regexp: "^[0-9]{16}$",
    bban_validation_func: checkEstonianBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  EG: { chars: 29, bban_regexp: "^[0-9]{25}", IBANRegistry: true },
  EH: {},
  ER: {},
  ES: {
    chars: 24,
    bban_validation_func: checkSpainBBAN,
    bban_regexp: "^[0-9]{20}$",
    IBANRegistry: true,
    SEPA: true
  },
  ET: {},
  FI: {
    chars: 18,
    bban_regexp: "^[0-9]{14}$",
    IBANRegistry: true,
    SEPA: true
  },
  FJ: {},
  FK: {},
  FM: {},
  FO: { chars: 18, bban_regexp: "^[0-9]{14}$", IBANRegistry: true },
  FR: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    bban_validation_func: checkFrenchBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  GA: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  GB: {
    chars: 22,
    bban_regexp: "^[A-Z]{4}[0-9]{14}$",
    IBANRegistry: true,
    SEPA: true
  },
  GD: {},
  GE: {
    chars: 22,
    bban_regexp: "^[A-Z0-9]{2}[0-9]{16}$",
    IBANRegistry: true
  },
  GF: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  GG: {},
  GH: {},
  GI: {
    chars: 23,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{15}$",
    IBANRegistry: true,
    SEPA: true
  },
  GL: { chars: 18, bban_regexp: "^[0-9]{14}$", IBANRegistry: true },
  GM: {},
  GN: {},
  GP: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  GQ: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  GR: {
    chars: 27,
    bban_regexp: "^[0-9]{7}[A-Z0-9]{16}$",
    IBANRegistry: true,
    SEPA: true
  },
  GS: {},
  GT: {
    chars: 28,
    bban_regexp: "^[A-Z0-9]{24}$",
    IBANRegistry: true
  },
  GU: {},
  GW: {
    chars: 25,
    bban_regexp: "^[A-Z]{2}[0-9]{19}$"
  },
  GY: {},
  HK: {},
  HM: {},
  HN: {
    chars: 28,
    bban_regexp: "^[A-Z]{4}[0-9]{20}$"
  },
  HR: {
    chars: 21,
    bban_regexp: "^[0-9]{17}$",
    bban_validation_func: checkCroatianBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  HT: {},
  HU: {
    chars: 28,
    bban_regexp: "^[0-9]{24}$",
    bban_validation_func: checkHungarianBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  ID: {},
  IE: {
    chars: 22,
    bban_regexp: "^[A-Z0-9]{4}[0-9]{14}$",
    IBANRegistry: true,
    SEPA: true
  },
  IL: {
    chars: 23,
    bban_regexp: "^[0-9]{19}$",
    IBANRegistry: true
  },
  IM: {},
  IN: {},
  IO: {},
  IQ: {
    chars: 23,
    bban_regexp: "^[A-Z]{4}[0-9]{15}$",
    IBANRegistry: true
  },
  IR: {
    chars: 26,
    bban_regexp: "^[0-9]{22}$"
  },
  IS: { chars: 26, bban_regexp: "^[0-9]{22}$", IBANRegistry: true, SEPA: true },
  IT: {
    chars: 27,
    bban_regexp: "^[A-Z]{1}[0-9]{10}[A-Z0-9]{12}$",
    IBANRegistry: true,
    SEPA: true
  },
  JE: {},
  JM: {},
  JO: {
    chars: 30,
    bban_regexp: "^[A-Z]{4}[0-9]{4}[A-Z0-9]{18}$",
    IBANRegistry: true
  },
  JP: {},
  KE: {},
  KG: {},
  KH: {},
  KI: {},
  KM: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  KN: {},
  KP: {},
  KR: {},
  KW: {
    chars: 30,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{22}$",
    IBANRegistry: true
  },
  KY: {},
  KZ: {
    chars: 20,
    bban_regexp: "^[0-9]{3}[A-Z0-9]{13}$",
    IBANRegistry: true
  },
  LA: {},
  LB: {
    chars: 28,
    bban_regexp: "^[0-9]{4}[A-Z0-9]{20}$",
    IBANRegistry: true
  },
  LC: {
    chars: 32,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{24}$",
    IBANRegistry: true
  },
  LI: {
    chars: 21,
    bban_regexp: "^[0-9]{5}[A-Z0-9]{12}$",
    IBANRegistry: true,
    SEPA: true
  },
  LK: {},
  LR: {},
  LS: {},
  LT: { chars: 20, bban_regexp: "^[0-9]{16}$", IBANRegistry: true, SEPA: true },
  LU: {
    chars: 20,
    bban_regexp: "^[0-9]{3}[A-Z0-9]{13}$",
    IBANRegistry: true,
    SEPA: true
  },
  LV: {
    chars: 21,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{13}$",
    IBANRegistry: true,
    SEPA: true
  },
  LY: {
    chars: 25,
    bban_regexp: "^[0-9]{21}$",
    IBANRegistry: true
  },
  MA: {
    chars: 28,
    bban_regexp: "^[0-9]{24}$"
  },
  MC: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    bban_validation_func: checkFrenchBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  MD: {
    chars: 24,
    bban_regexp: "^[A-Z0-9]{2}[A-Z0-9]{18}$",
    IBANRegistry: true
  },
  ME: {
    chars: 22,
    bban_regexp: "^[0-9]{18}$",
    bban_validation_func: checkMod9710BBAN,
    IBANRegistry: true
  },
  MF: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  MG: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  MH: {},
  MK: {
    chars: 19,
    bban_regexp: "^[0-9]{3}[A-Z0-9]{10}[0-9]{2}$",
    bban_validation_func: checkMod9710BBAN,
    IBANRegistry: true
  },
  ML: {
    chars: 28,
    bban_regexp: "^[A-Z0-9]{2}[0-9]{22}$"
  },
  MM: {},
  MN: {
    chars: 20,
    bban_regexp: "^[0-9]{16}$"
  },
  MO: {},
  MP: {},
  MQ: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  MR: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$",
    IBANRegistry: true
  },
  MS: {},
  MT: {
    chars: 31,
    bban_regexp: "^[A-Z]{4}[0-9]{5}[A-Z0-9]{18}$",
    IBANRegistry: true,
    SEPA: true
  },
  MU: {
    chars: 30,
    bban_regexp: "^[A-Z]{4}[0-9]{19}[A-Z]{3}$",
    IBANRegistry: true
  },
  MV: {},
  MW: {},
  MX: {},
  MY: {},
  MZ: {
    chars: 25,
    bban_regexp: "^[0-9]{21}$"
  },
  NA: {},
  NC: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  NE: {
    chars: 28,
    bban_regexp: "^[A-Z]{2}[0-9]{22}$"
  },
  NF: {},
  NG: {},
  NI: {
    chars: 32,
    bban_regexp: "^[A-Z]{4}[0-9]{24}$"
  },
  NL: {
    chars: 18,
    bban_regexp: "^[A-Z]{4}[0-9]{10}$",
    IBANRegistry: true,
    SEPA: true
  },
  NO: {
    chars: 15,
    bban_regexp: "^[0-9]{11}$",
    bban_validation_func: checkNorwayBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  NP: {},
  NR: {},
  NU: {},
  NZ: {},
  OM: {},
  PA: {},
  PE: {},
  PF: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  PG: {},
  PH: {},
  PK: {
    chars: 24,
    bban_regexp: "^[A-Z0-9]{4}[0-9]{16}$",
    IBANRegistry: true
  },
  PL: { chars: 28, bban_validation_func: checkPolandBBAN, bban_regexp: "^[0-9]{24}$", IBANRegistry: true, SEPA: true },
  PM: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  PN: {},
  PR: {},
  PS: {
    chars: 29,
    bban_regexp: "^[A-Z0-9]{4}[0-9]{21}$",
    IBANRegistry: true
  },
  PT: { chars: 25, bban_regexp: "^[0-9]{21}$", bban_validation_func: checkMod9710BBAN, IBANRegistry: true, SEPA: true },
  PW: {},
  PY: {},
  QA: {
    chars: 29,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{21}$",
    IBANRegistry: true
  },
  RE: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  RO: {
    chars: 24,
    bban_regexp: "^[A-Z]{4}[A-Z0-9]{16}$",
    IBANRegistry: true,
    SEPA: true
  },
  RS: {
    chars: 22,
    bban_regexp: "^[0-9]{18}$",
    bban_validation_func: checkMod9710BBAN,
    IBANRegistry: true
  },
  RU: {
    chars: 33,
    bban_regexp: "^[0-9]{14}[A-Z0-9]{15}$",
    IBANRegistry: true
  },
  RW: {},
  SA: {
    chars: 24,
    bban_regexp: "^[0-9]{2}[A-Z0-9]{18}$",
    IBANRegistry: true
  },
  SB: {},
  SC: {
    chars: 31,
    bban_regexp: "^[A-Z]{4}[0-9]{20}[A-Z]{3}$",
    IBANRegistry: true
  },
  SD: {
    chars: 18,
    bban_regexp: "^[0-9]{14}$",
    IBANRegistry: true
  },
  SE: { chars: 24, bban_regexp: "^[0-9]{20}$", IBANRegistry: true, SEPA: true },
  SG: {},
  SH: {},
  SI: {
    chars: 19,
    bban_regexp: "^[0-9]{15}$",
    bban_validation_func: checkMod9710BBAN,
    IBANRegistry: true,
    SEPA: true
  },
  SJ: {},
  SK: {
    chars: 24,
    bban_regexp: "^[0-9]{20}$",
    bban_validation_func: checkCzechAndSlovakBBAN,
    IBANRegistry: true,
    SEPA: true
  },
  SL: {},
  SM: {
    chars: 27,
    bban_regexp: "^[A-Z]{1}[0-9]{10}[A-Z0-9]{12}$",
    IBANRegistry: true,
    SEPA: true
  },
  SN: {
    chars: 28,
    bban_regexp: "^[A-Z]{2}[0-9]{22}$"
  },
  SO: {
    chars: 23,
    bban_regexp: "^[0-9]{19}$",
    IBANRegistry: true
  },
  SR: {},
  SS: {},
  ST: {
    chars: 25,
    bban_regexp: "^[0-9]{21}$",
    IBANRegistry: true
  },
  SV: {
    chars: 28,
    bban_regexp: "^[A-Z]{4}[0-9]{20}$",
    IBANRegistry: true
  },
  SX: {},
  SY: {},
  SZ: {},
  TC: {},
  TD: {
    chars: 27,
    bban_regexp: "^[0-9]{23}$"
  },
  TF: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  TG: {
    chars: 28,
    bban_regexp: "^[A-Z]{2}[0-9]{22}$"
  },
  TH: {},
  TJ: {},
  TK: {},
  TL: {
    chars: 23,
    bban_regexp: "^[0-9]{19}$",
    IBANRegistry: true
  },
  TM: {},
  TN: {
    chars: 24,
    bban_regexp: "^[0-9]{20}$",
    IBANRegistry: true
  },
  TO: {},
  TR: {
    chars: 26,
    bban_regexp: "^[0-9]{5}[A-Z0-9]{17}$",
    IBANRegistry: true
  },
  TT: {},
  TV: {},
  TW: {},
  TZ: {},
  UA: {
    chars: 29,
    bban_regexp: "^[0-9]{6}[A-Z0-9]{19}$",
    IBANRegistry: true
  },
  UG: {},
  UM: {},
  US: {},
  UY: {},
  UZ: {},
  VA: { chars: 22, bban_regexp: "^[0-9]{18}", IBANRegistry: true },
  VC: {},
  VE: {},
  VG: {
    chars: 24,
    bban_regexp: "^[A-Z0-9]{4}[0-9]{16}$",
    IBANRegistry: true
  },
  VI: {},
  VN: {},
  VU: {},
  WF: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  WS: {},
  XK: {
    chars: 20,
    bban_regexp: "^[0-9]{16}$",
    IBANRegistry: true
  },
  YE: {},
  YT: {
    chars: 27,
    bban_regexp: "^[0-9]{10}[A-Z0-9]{11}[0-9]{2}$",
    IBANRegistry: true
  },
  ZA: {},
  ZM: {},
  ZW: {}
};
export {
  ValidationErrorsBIC,
  ValidationErrorsIBAN,
  composeIBAN,
  countrySpecs,
  electronicFormatIBAN,
  extractBIC,
  extractIBAN,
  friendlyFormatIBAN,
  getCountrySpecifications,
  isQRIBAN,
  isSEPACountry,
  isValidBBAN,
  isValidBIC,
  isValidIBAN,
  setCountryBBANValidation,
  validateBIC,
  validateIBAN
};
/*! Bundled license information:

ibantools/jsnext/ibantools.js:
  (*!
   * @license
   * This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. *)
  (**
   * Validation, extraction and creation of IBAN, BBAN, BIC/SWIFT numbers plus some other helpful stuff
   * @package Documentation
   * @author Saša Jovanić
   * @module ibantools
   * @version 4.3.3
   * @license MPL-2.0
   * @preferred
   *)
*/
//# sourceMappingURL=ibantools.js.map
