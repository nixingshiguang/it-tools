{
  "version": 3,
  "sources": ["../../.pnpm/ulid@2.3.0/node_modules/ulid/stubs/crypto.js", "../../.pnpm/ulid@2.3.0/node_modules/ulid/dist/index.esm.js"],
  "sourcesContent": ["", "function createError(message) {\n    var err = new Error(message);\n    err.source = \"ulid\";\n    return err;\n}\n// These values should NEVER change. If\n// they do, we're no longer making ulids!\nvar ENCODING = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\"; // Crockford's Base32\nvar ENCODING_LEN = ENCODING.length;\nvar TIME_MAX = Math.pow(2, 48) - 1;\nvar TIME_LEN = 10;\nvar RANDOM_LEN = 16;\nfunction replaceCharAt(str, index, char) {\n    if (index > str.length - 1) {\n        return str;\n    }\n    return str.substr(0, index) + char + str.substr(index + 1);\n}\nfunction incrementBase32(str) {\n    var done = undefined;\n    var index = str.length;\n    var char = void 0;\n    var charIndex = void 0;\n    var maxCharIndex = ENCODING_LEN - 1;\n    while (!done && index-- >= 0) {\n        char = str[index];\n        charIndex = ENCODING.indexOf(char);\n        if (charIndex === -1) {\n            throw createError(\"incorrectly encoded string\");\n        }\n        if (charIndex === maxCharIndex) {\n            str = replaceCharAt(str, index, ENCODING[0]);\n            continue;\n        }\n        done = replaceCharAt(str, index, ENCODING[charIndex + 1]);\n    }\n    if (typeof done === \"string\") {\n        return done;\n    }\n    throw createError(\"cannot increment this string\");\n}\nfunction randomChar(prng) {\n    var rand = Math.floor(prng() * ENCODING_LEN);\n    if (rand === ENCODING_LEN) {\n        rand = ENCODING_LEN - 1;\n    }\n    return ENCODING.charAt(rand);\n}\nfunction encodeTime(now, len) {\n    if (isNaN(now)) {\n        throw new Error(now + \" must be a number\");\n    }\n    if (now > TIME_MAX) {\n        throw createError(\"cannot encode time greater than \" + TIME_MAX);\n    }\n    if (now < 0) {\n        throw createError(\"time must be positive\");\n    }\n    if (Number.isInteger(now) === false) {\n        throw createError(\"time must be an integer\");\n    }\n    var mod = void 0;\n    var str = \"\";\n    for (; len > 0; len--) {\n        mod = now % ENCODING_LEN;\n        str = ENCODING.charAt(mod) + str;\n        now = (now - mod) / ENCODING_LEN;\n    }\n    return str;\n}\nfunction encodeRandom(len, prng) {\n    var str = \"\";\n    for (; len > 0; len--) {\n        str = randomChar(prng) + str;\n    }\n    return str;\n}\nfunction decodeTime(id) {\n    if (id.length !== TIME_LEN + RANDOM_LEN) {\n        throw createError(\"malformed ulid\");\n    }\n    var time = id.substr(0, TIME_LEN).split(\"\").reverse().reduce(function (carry, char, index) {\n        var encodingIndex = ENCODING.indexOf(char);\n        if (encodingIndex === -1) {\n            throw createError(\"invalid character found: \" + char);\n        }\n        return carry += encodingIndex * Math.pow(ENCODING_LEN, index);\n    }, 0);\n    if (time > TIME_MAX) {\n        throw createError(\"malformed ulid, timestamp too large\");\n    }\n    return time;\n}\nfunction detectPrng() {\n    var allowInsecure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var root = arguments[1];\n\n    if (!root) {\n        root = typeof window !== \"undefined\" ? window : null;\n    }\n    var browserCrypto = root && (root.crypto || root.msCrypto);\n    if (browserCrypto) {\n        return function () {\n            var buffer = new Uint8Array(1);\n            browserCrypto.getRandomValues(buffer);\n            return buffer[0] / 0xff;\n        };\n    } else {\n        try {\n            var nodeCrypto = require(\"crypto\");\n            return function () {\n                return nodeCrypto.randomBytes(1).readUInt8() / 0xff;\n            };\n        } catch (e) {}\n    }\n    if (allowInsecure) {\n        try {\n            console.error(\"secure crypto unusable, falling back to insecure Math.random()!\");\n        } catch (e) {}\n        return function () {\n            return Math.random();\n        };\n    }\n    throw createError(\"secure crypto unusable, insecure Math.random not allowed\");\n}\nfunction factory(currPrng) {\n    if (!currPrng) {\n        currPrng = detectPrng();\n    }\n    return function ulid(seedTime) {\n        if (isNaN(seedTime)) {\n            seedTime = Date.now();\n        }\n        return encodeTime(seedTime, TIME_LEN) + encodeRandom(RANDOM_LEN, currPrng);\n    };\n}\nfunction monotonicFactory(currPrng) {\n    if (!currPrng) {\n        currPrng = detectPrng();\n    }\n    var lastTime = 0;\n    var lastRandom = void 0;\n    return function ulid(seedTime) {\n        if (isNaN(seedTime)) {\n            seedTime = Date.now();\n        }\n        if (seedTime <= lastTime) {\n            var incrementedRandom = lastRandom = incrementBase32(lastRandom);\n            return encodeTime(lastTime, TIME_LEN) + incrementedRandom;\n        }\n        lastTime = seedTime;\n        var newRandom = lastRandom = encodeRandom(RANDOM_LEN, currPrng);\n        return encodeTime(seedTime, TIME_LEN) + newRandom;\n    };\n}\nvar ulid = factory();\n\nexport { replaceCharAt, incrementBase32, randomChar, encodeTime, encodeRandom, decodeTime, detectPrng, factory, monotonicFactory, ulid };\n"],
  "mappings": "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",
  "names": ["ulid"]
}
