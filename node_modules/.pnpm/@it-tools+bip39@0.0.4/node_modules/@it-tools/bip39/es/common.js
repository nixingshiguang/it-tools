import{sha256 as t}from"js-sha256";import{customAlphabet as n}from"nanoid";const r=n("1234567890abcdef");function e(t){if(t<16)throw new Error("[bip39] Invalid entropy: the length of the entropy string should be >= 16 ");if(t>32)throw new Error("[bip39] Invalid entropy: the length of the entropy string should be <= 32");if(t%4!=0)throw new Error("[bip39] Invalid entropy: the length of the entropy string should be a multiple of 4")}function o(t=32){return e(t),r(t)}function i(n){const r=8*n.length/32;return h(f(t.hex(n))).slice(0,r)}function h(t){return t.reduce(((t,n)=>t+n.toString(2).padStart(8,"0")),"")}function p(t){return parseInt(t,2)}function f(t){return(t.match(/.{1,2}/g)??[]).map((t=>parseInt(t,16)))}export{h as bytesToBinary,o as generateEntropy,f as getByteArrayFromHexString,i as getChecksumBin,p as getIntegerFromBin,e as validateEntropyLength};
//# sourceMappingURL=common.js.map
